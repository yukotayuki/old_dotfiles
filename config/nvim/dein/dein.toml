# color schema
[[plugins]]
repo = 'morhetz/gruvbox'

# 現在コードのfiletypeの判定(他のプラグインから使用されることを想定)
[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

# snippet機能を追加
#   context_filetype => 文脈に合わせたスニペットを提供
#   neosnippet-snippets => 用意しているスニペットを提供
[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_add = '''

"smapはいらないこ？
smap <silent><C-k> <Plug>(neosnippet_expand_or_jump)
xmap <silent><Enter> <Plug>(neosnippet_expand_target)

" tab: 補完一覧の移動
imap  <expr><TAB>
  \ pumvisible() ? "\<C-n>" : "\<TAB>"

" enter: 補完内容の展開
imap <expr><Enter>
  \ neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)" : "\<Enter>"

"let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#enable_completed_snippet = 1
let g:neosnippet#expand_word_boundary = 1

"if has('conceal')
"  set conceallevel=2 concealcursor=i
"  set conceallevel=2 concealcursor=niv
"endif
'''

# dark powered neo-completionの略
# 非同期の補完フレームワーク
# 補完一覧を出す
[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = ['context_filetype.vim']
on_event = 'InsertEnter'
hook_add = '''
let g:deoplete#enable_at_startup = 1
let g:deoplete#auto_complete_delay = 0
let g:deoplete#auto_complete_start_length = 1
let g:deoplete#enable_camel_case = 0
let g:deoplete#enable_ignore_case = 0
let g:deoplete#enable_refresh_always = 0
let g:deoplete#enable_smart_case = 1
let g:deoplete#file#enable_buffer_path = 1
let g:deoplete#max_list = 10000
'''

# language serverと連携し補完する
[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
hook_add = '''
set hidden
let g:LanguageClient_serverCommands = {
    \ 'vue': ['vls'],
    \ }

augroup LanguageClient_config
autocmd!
autocmd User LanguageClientStarted setlocal signcolumn=yes
autocmd User LanguageClientStopped setlocal signcolumn=auto
augroup END

let g:LanguageClient_autoStart = 1
nnoremap <F5> :call LanguageClient_contextMenu()<CR>
nnoremap <Leader>lh :call LanguageClient_textDocument_hover()<CR>
nnoremap <Leader>ld :call LanguageClient_textDocument_definition()<CR>
nnoremap <Leader>lr :call LanguageClient_textDocument_rename()<CR>
nnoremap <Leader>lf :call LanguageClient_textDocument_formatting()<CR>
'''

# 補完リスト？をdeopleteに出してくれる
[[plugins]]
repo = 'posva/vim-vue'
hook_add = '''
autocmd FileType vue syntax sync fromstart
'''

[[plugins]]
repo = 'prettier/vim-prettier'
build = 'npm install'
on_ft = ['javascript', 'typescript', 'vue', 'css', 'scss', 'json', 'markdown']
hook_add = '''
"source ~/.config/nvim/plugins/vim-prettier.rc.vim
" @formatアノテーションを持ったファイルの自動フォーマットを無効にする
let g:prettier#autoformat = 0

" Prettierのパースエラーをquickfixに表示しない
let g:prettier#quickfix_enabled = 0

autocmd BufWritePre *.js,*.ts,*.vue,*.css,*.scss,*.json,*.md PrettierAsync
'''


[[plugins]]
repo = 'digitaltoad/vim-pug'
on_ft = ['pug', 'vue']

[[plugins]]
repo = 'dNitro/vim-pug-complete'
hook_add = '''
let g:html5_event_handler_attributes_complete = 0 " Disable event-handler attributes
let g:html5_rdfa_attributes_complete = 0          " Disable RDFa attributes
let g:html5_microdata_attributes_complete = 0     " Disable microdata attributes
let g:html5_aria_attributes_complete = 0          " Disable WAI-ARIA attribute
'''
